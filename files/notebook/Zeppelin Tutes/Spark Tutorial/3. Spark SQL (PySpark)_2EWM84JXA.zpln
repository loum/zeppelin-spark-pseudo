{
  "paragraphs": [
    {
      "title": "Introduction",
      "text": "%md\n\nThis is a tutorial for Spark SQL in PySpark (based on Spark 3.x).  The `%spark.pyspark` gives you:\n\n- **SparkSession**: [the entry point of Spark SQL](https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession)\n- **Datasets**: [distributed collection of data](https://spark.apache.org/docs/latest/sql-programming-guide.html)\n- **DataFrames**: [_Dataset_ organised into named columns](https://spark.apache.org/docs/latest/sql-programming-guide.html)",
      "user": "anonymous",
      "dateUpdated": "2021-07-17 01:40:47.596",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": false,
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThis is a tutorial for Spark SQL in PySpark (based on Spark 3.x).  The \u003ccode\u003e%spark.pyspark\u003c/code\u003e gives you:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSparkSession\u003c/strong\u003e: \u003ca href\u003d\"https://spark.apache.org/docs/latest/sql-getting-started.html#starting-point-sparksession\"\u003ethe entry point of Spark SQL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDatasets\u003c/strong\u003e: \u003ca href\u003d\"https://spark.apache.org/docs/latest/sql-programming-guide.html\"\u003edistributed collection of data\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDataFrames\u003c/strong\u003e: \u003ca href\u003d\"https://spark.apache.org/docs/latest/sql-programming-guide.html\"\u003e\u003cem\u003eDataset\u003c/em\u003e organised into named columns\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700849_2035279674",
      "id": "20180530-101118_380906698",
      "dateCreated": "2020-01-07 17:01:40.849",
      "dateStarted": "2021-07-17 01:35:57.045",
      "dateFinished": "2021-07-17 01:35:57.055",
      "status": "FINISHED"
    },
    {
      "title": "Create DataFrame",
      "text": "%md\n\nPySpark DataFrames can be created as per the following:\n\n* Use SparkSession to create DataFrame directly. You can either create DataFrame from RDD, List type objects and etc.\n* Use DataFrameReader to create Dataset/DataFrame from many kinds of storages that is supported by spark, such as HDFS, jdbc and etc.",
      "user": "anonymous",
      "dateUpdated": "2021-07-17 01:40:44.240",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": false,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003ePySpark DataFrames can be created as per the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse SparkSession to create DataFrame directly. You can either create DataFrame from RDD, List type objects and etc.\u003c/li\u003e\n\u003cli\u003eUse DataFrameReader to create Dataset/DataFrame from many kinds of storages that is supported by spark, such as HDFS, jdbc and etc.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_-1934281275",
      "id": "20180530-101515_948520659",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2021-07-17 01:40:38.478",
      "dateFinished": "2021-07-17 01:40:38.486",
      "status": "FINISHED"
    },
    {
      "title": "Create Dataset/DataFrame via SparkSession",
      "text": "%spark.pyspark\n\n# create DataFrame from python list. It can infer schema for you.\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]).\\\n    toDF(\"id\", \"name\", \"age\", \"country\")\ndf1.printSchema()\ndf1.show()\n\n# create DataFrame from pandas dataframe\ndf2 \u003d spark.createDataFrame(df1.toPandas())\ndf2.printSchema()\ndf2.show()\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:50:50.334",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- id: long (nullable \u003d true)\n |-- name: string (nullable \u003d true)\n |-- age: long (nullable \u003d true)\n |-- country: string (nullable \u003d true)\n\n+---+-----+---+-------+\n| id| name|age|country|\n+---+-----+---+-------+\n|  1| andy| 20|    USA|\n|  2| jeff| 23|  China|\n|  3|james| 18|    USA|\n+---+-----+---+-------+\n\n"
          },
          {
            "type": "TEXT",
            "data": "Fail to execute line 10: df2 \u003d spark.createDataFrame(df1.toPandas())\nTraceback (most recent call last):\n  File \"/opt/spark/python/pyspark/sql/pandas/utils.py\", line 27, in require_minimum_pandas_version\n    import pandas\nModuleNotFoundError: No module named \u0027pandas\u0027\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/tmp/hadoop-hdfs/nm-local-dir/usercache/hdfs/appcache/application_1665365078590_0001/container_1665365078590_0001_01_000001/tmp/python13883826423540694025/zeppelin_python.py\", line 162, in \u003cmodule\u003e\n    exec(code, _zcUserQueryNameSpace)\n  File \"\u003cstdin\u003e\", line 10, in \u003cmodule\u003e\n  File \"/opt/spark/python/pyspark/sql/pandas/conversion.py\", line 62, in toPandas\n    require_minimum_pandas_version()\n  File \"/opt/spark/python/pyspark/sql/pandas/utils.py\", line 33, in require_minimum_pandas_version\n    raise ImportError(\"Pandas \u003e\u003d %s must be installed; however, \"\nImportError: Pandas \u003e\u003d 0.23.2 must be installed; however, it was not found.\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d4"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_1345292725",
      "id": "20180530-101750_1491737301",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:50:50.339",
      "dateFinished": "2022-10-10 03:50:51.859",
      "status": "ERROR"
    },
    {
      "title": "Create DataFrame via DataFrameReader",
      "text": "%spark.pyspark\n\nSPARK_HOME \u003d\u0027/opt/spark\u0027\n\nspark.read.json(f\u0027file://{SPARK_HOME}/examples/src/main/resources/people.json\u0027)\ndf1.printSchema()\ndf1.show()\n\n# Read data from csv file.\n# You can customise it via spark.read.options.\ndf2 \u003d spark.read.options(sep\u003d\";\", header\u003dTrue).csv(f\u0027file://{SPARK_HOME}/examples/src/main/resources/people.csv\u0027)\ndf2.printSchema()\ndf2.show()\n\n# Specify schema for your csv file\nfrom pyspark.sql.types import StructType, StringType, IntegerType\n\nschema \u003d StructType().add(\"name\", StringType(), True) \\\n    .add(\"age\", IntegerType(), True) \\\n    .add(\"job\", StringType(), True)\n    \ndf3 \u003d spark.read.options(sep\u003d\";\", header\u003dTrue) \\\n    .schema(schema) \\\n    .csv(\"file://\" + SPARK_HOME + \"/examples/src/main/resources/people.csv\") \ndf3.printSchema()\ndf3.show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:50:54.648",
      "progress": 0,
      "config": {
        "lineNumbers": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          }
        },
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- id: long (nullable \u003d true)\n |-- name: string (nullable \u003d true)\n |-- age: long (nullable \u003d true)\n |-- country: string (nullable \u003d true)\n\n+---+-----+---+-------+\n| id| name|age|country|\n+---+-----+---+-------+\n|  1| andy| 20|    USA|\n|  2| jeff| 23|  China|\n|  3|james| 18|    USA|\n+---+-----+---+-------+\n\nroot\n |-- name: string (nullable \u003d true)\n |-- age: string (nullable \u003d true)\n |-- job: string (nullable \u003d true)\n\n+-----+---+---------+\n| name|age|      job|\n+-----+---+---------+\n|Jorge| 30|Developer|\n|  Bob| 32|Developer|\n+-----+---+---------+\n\nroot\n |-- name: string (nullable \u003d true)\n |-- age: integer (nullable \u003d true)\n |-- job: string (nullable \u003d true)\n\n+-----+---+---------+\n| name|age|      job|\n+-----+---+---------+\n|Jorge| 30|Developer|\n|  Bob| 32|Developer|\n+-----+---+---------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d5"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d6"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d7"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d8"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d10"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_581443636",
      "id": "20180530-101930_1495479697",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:50:54.653",
      "dateFinished": "2022-10-10 03:50:56.690",
      "status": "FINISHED"
    },
    {
      "title": "Add New Column",
      "text": "%spark.pyspark\n\n# withColumn could be used to add new Column\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]).\\\n    toDF(\"id\", \"name\", \"age\", \"country\")\n\ndf2 \u003d df1.withColumn(\"age2\", df1[\"age\"] + 1)\ndf2.show()\n\n# the new column could replace the existing the column if the new column name is the same as the old column\ndf3 \u003d df1.withColumn(\"age\", df1[\"age\"] + 1)\ndf3.show()\n\n# Besides using expression to create new column, you could also use udf to create new column\n# Use F.upper instead of upper, because the builtin udf of spark may conclifct with that of python, such as max\nimport pyspark.sql.functions as F\ndf4 \u003d df1.withColumn(\"name\", F.upper(df1[\"name\"]))\ndf4.show()",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:50:59.300",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-----+---+-------+----+\n| id| name|age|country|age2|\n+---+-----+---+-------+----+\n|  1| andy| 20|    USA|  21|\n|  2| jeff| 23|  China|  24|\n|  3|james| 18|    USA|  19|\n+---+-----+---+-------+----+\n\n+---+-----+---+-------+\n| id| name|age|country|\n+---+-----+---+-------+\n|  1| andy| 21|    USA|\n|  2| jeff| 24|  China|\n|  3|james| 19|    USA|\n+---+-----+---+-------+\n\n+---+-----+---+-------+\n| id| name|age|country|\n+---+-----+---+-------+\n|  1| ANDY| 20|    USA|\n|  2| JEFF| 23|  China|\n|  3|JAMES| 18|    USA|\n+---+-----+---+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d11"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d12"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d13"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d14"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d15"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d16"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_-775755394",
      "id": "20180530-105113_693855403",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:50:59.303",
      "dateFinished": "2022-10-10 03:50:59.991",
      "status": "FINISHED"
    },
    {
      "title": "Remove Column",
      "text": "%spark.pyspark\n\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]).\\\n    toDF(\"id\", \"name\", \"age\", \"country\")\n# drop could be used to remove Column\ndf2 \u003d df1.drop(\"id\")\ndf2.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:05.850",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---+-------+\n| name|age|country|\n+-----+---+-------+\n| andy| 20|    USA|\n| jeff| 23|  China|\n|james| 18|    USA|\n+-----+---+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d17"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d18"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_-886487025",
      "id": "20180530-112045_1274721210",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:51:05.854",
      "dateFinished": "2022-10-10 03:51:06.105",
      "status": "FINISHED"
    },
    {
      "title": "Select Subset of Columns",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]).\\\n    toDF(\"id\", \"name\", \"age\", \"country\")\n# select can accept a list of string of the column names\ndf2 \u003d df1.select(\"id\", \"name\")\ndf2.show()\n\n# select can also accept a list of Column. You can create column via $ or udf\nimport pyspark.sql.functions as F\ndf3 \u003d df1.select(df1[\"id\"], F.upper(df1[\"name\"]), df1[\"age\"] + 1)\ndf3.show()\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:09.366",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-----+\n| id| name|\n+---+-----+\n|  1| andy|\n|  2| jeff|\n|  3|james|\n+---+-----+\n\n+---+-----------+---------+\n| id|upper(name)|(age + 1)|\n+---+-----------+---------+\n|  1|       ANDY|       21|\n|  2|       JEFF|       24|\n|  3|      JAMES|       19|\n+---+-----------+---------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d19"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d21"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d22"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_2124268380",
      "id": "20180530-113042_1154914545",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:51:09.370",
      "dateFinished": "2022-10-10 03:51:09.758",
      "status": "FINISHED"
    },
    {
      "title": "Filter Rows",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")]).\\\n    toDF(\"id\", \"name\", \"age\", \"country\")\n\n# filter accept a Column \ndf2 \u003d df1.filter(df1[\"age\"] \u003e\u003d 20)\ndf2.show()\n\n# To be noticed, you need to use \"\u0026\" instead of \"\u0026\u0026\" or \"AND\" \ndf3 \u003d df1.filter((df1[\"age\"] \u003e\u003d 20) \u0026 (df1[\"country\"] \u003d\u003d \"China\"))\ndf3.show()\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:14.480",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+----+---+-------+\n| id|name|age|country|\n+---+----+---+-------+\n|  1|andy| 20|    USA|\n|  2|jeff| 23|  China|\n+---+----+---+-------+\n\n+---+----+---+-------+\n| id|name|age|country|\n+---+----+---+-------+\n|  2|jeff| 23|  China|\n+---+----+---+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d23"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d24"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d25"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d26"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_1501705200",
      "id": "20180530-113407_58454283",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:51:14.482",
      "dateFinished": "2022-10-10 03:51:14.858",
      "status": "FINISHED"
    },
    {
      "title": "Create UDF",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")])\\\n            .toDF(\"id\", \"name\", \"age\", \"country\")\n\n# Create udf create python lambda\nfrom pyspark.sql.functions import udf\nudf1 \u003d udf(lambda e: e.upper())\ndf2 \u003d df1.select(udf1(df1[\"name\"]))\ndf2.show()\n\n# UDF could also be used in filter, in this case the return type must be Boolean\n# We can also use annotation to create udf\nfrom pyspark.sql.types import *\n@udf(returnType\u003dBooleanType())\ndef udf2(e):\n    if e \u003e\u003d 20:\n        return True;\n    else:\n        return False\n\ndf3 \u003d df1.filter(udf2(df1[\"age\"]))\ndf3.show()\n\n# UDF could also accept more than 1 argument.\nudf3 \u003d udf(lambda e1, e2: e1 + \"_\" + e2)\ndf4 \u003d df1.select(udf3(df1[\"name\"], df1[\"country\"]).alias(\"name_country\"))\ndf4.show()\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:20.378",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------+\n|\u003clambda\u003e(name)|\n+--------------+\n|          ANDY|\n|          JEFF|\n|         JAMES|\n+--------------+\n\n+---+----+---+-------+\n| id|name|age|country|\n+---+----+---+-------+\n|  1|andy| 20|    USA|\n|  2|jeff| 23|  China|\n+---+----+---+-------+\n\n+------------+\n|name_country|\n+------------+\n|    andy_USA|\n|  jeff_China|\n|   james_USA|\n+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d27"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d28"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d29"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d30"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d31"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d32"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_574730063",
      "id": "20180530-113720_1986531680",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:51:20.382",
      "dateFinished": "2022-10-10 03:51:21.167",
      "status": "FINISHED"
    },
    {
      "title": "GroupBy",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")])\\\n           .toDF(\"id\", \"name\", \"age\", \"country\")\n\n# You can call agg function after groupBy directly, such as count/min/max/avg/sum\ndf2 \u003d df1.groupBy(\"country\").count()\ndf2.show()\n\n# Pass a Map if you want to do multiple aggregation\ndf3 \u003d df1.groupBy(\"country\").agg({\"age\": \"avg\", \"id\": \"count\"})\ndf3.show()\n\nimport pyspark.sql.functions as F\n# Or you can pass a list of agg function\ndf4 \u003d df1.groupBy(\"country\").agg(F.avg(df1[\"age\"]).alias(\"avg_age\"), F.count(df1[\"id\"]).alias(\"count\"))\ndf4.show()\n\n# You can not pass Map if you want to do multiple aggregation on the same column as the key of Map should be unique. So in this case\n# you have to pass a list of agg functions\ndf5 \u003d df1.groupBy(\"country\").agg(F.avg(df1[\"age\"]).alias(\"avg_age\"), F.max(df1[\"age\"]).alias(\"max_age\"))\ndf5.show()\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:27.630",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+-----+\n|country|count|\n+-------+-----+\n|  China|    1|\n|    USA|    2|\n+-------+-----+\n\n+-------+---------+--------+\n|country|count(id)|avg(age)|\n+-------+---------+--------+\n|  China|        1|    23.0|\n|    USA|        2|    19.0|\n+-------+---------+--------+\n\n+-------+-------+-----+\n|country|avg_age|count|\n+-------+-------+-----+\n|  China|   23.0|    1|\n|    USA|   19.0|    2|\n+-------+-------+-----+\n\n+-------+-------+-------+\n|country|avg_age|max_age|\n+-------+-------+-------+\n|  China|   23.0|     23|\n|    USA|   19.0|     20|\n+-------+-------+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d33"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d34"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d35"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d36"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d37"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d38"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d39"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d40"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d41"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d42"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d43"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d44"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d45"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d46"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d47"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d48"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d49"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d50"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d51"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d52"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700850_1233271138",
      "id": "20180530-114404_2076888937",
      "dateCreated": "2020-01-07 17:01:40.850",
      "dateStarted": "2022-10-10 03:51:27.632",
      "dateFinished": "2022-10-10 03:51:32.194",
      "status": "FINISHED"
    },
    {
      "title": "Join on Single Field",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, 1), (2, \"jeff\", 23, 2), (3, \"james\", 18, 3)]).\\\n    toDF(\"id\", \"name\", \"age\", \"c_id\")\ndf1.show()\n\ndf2 \u003d spark.createDataFrame([(1, \"USA\"), (2, \"China\")]).toDF(\"c_id\", \"c_name\")\ndf2.show()\n\n# You can just specify the key name if join on the same key\ndf3 \u003d df1.join(df2, \"c_id\")\ndf3.show()\n\n# Or you can specify the join condition expclitly in case the key is different between tables\ndf4 \u003d df1.join(df2, df1[\"c_id\"] \u003d\u003d df2[\"c_id\"])\ndf4.show()\n\n# You can specify the join type afte the join condition, by default it is inner join\ndf5 \u003d df1.join(df2, df1[\"c_id\"] \u003d\u003d df2[\"c_id\"], \"left_outer\")\ndf5.show()",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:40.433",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-----+---+----+\n| id| name|age|c_id|\n+---+-----+---+----+\n|  1| andy| 20|   1|\n|  2| jeff| 23|   2|\n|  3|james| 18|   3|\n+---+-----+---+----+\n\n+----+------+\n|c_id|c_name|\n+----+------+\n|   1|   USA|\n|   2| China|\n+----+------+\n\n+----+---+----+---+------+\n|c_id| id|name|age|c_name|\n+----+---+----+---+------+\n|   1|  1|andy| 20|   USA|\n|   2|  2|jeff| 23| China|\n+----+---+----+---+------+\n\n+---+----+---+----+----+------+\n| id|name|age|c_id|c_id|c_name|\n+---+----+---+----+----+------+\n|  1|andy| 20|   1|   1|   USA|\n|  2|jeff| 23|   2|   2| China|\n+---+----+---+----+----+------+\n\n+---+-----+---+----+----+------+\n| id| name|age|c_id|c_id|c_name|\n+---+-----+---+----+----+------+\n|  1| andy| 20|   1|   1|   USA|\n|  3|james| 18|   3|null|  null|\n|  2| jeff| 23|   2|   2| China|\n+---+-----+---+----+----+------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d53"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d54"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d55"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d56"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d57"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d58"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d59"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d60"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d61"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d62"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d63"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d64"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d65"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d66"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d67"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d68"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d69"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d70"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d71"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_-770209064",
      "id": "20180530-130126_1642948432",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:51:40.436",
      "dateFinished": "2022-10-10 03:51:44.495",
      "status": "FINISHED"
    },
    {
      "title": "Join on Multiple Fields",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(\"andy\", 20, 1, 1), (\"jeff\", 23, 1, 2), (\"james\", 12, 2, 2)]).\\\n    toDF(\"name\", \"age\", \"key_1\", \"key_2\")\ndf1.show()\n\ndf2 \u003d spark.createDataFrame([(1, 1, \"USA\"), (2, 2, \"China\")]).toDF(\"key_1\", \"key_2\", \"country\")\ndf2.show()\n\n# Join on 2 fields: key_1, key_2\n\n# You can pass a list of field name if the join field names are the same in both tables\ndf3 \u003d df1.join(df2, [\"key_1\", \"key_2\"])\ndf3.show()\n\n# Or you can specify the join condition expclitly in case when the join fields name is differetnt in the two tables\ndf4 \u003d df1.join(df2, (df1[\"key_1\"] \u003d\u003d df2[\"key_1\"]) \u0026 (df1[\"key_2\"] \u003d\u003d df2[\"key_2\"]))\ndf4.show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:44.224",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---+-----+-----+\n| name|age|key_1|key_2|\n+-----+---+-----+-----+\n| andy| 20|    1|    1|\n| jeff| 23|    1|    2|\n|james| 12|    2|    2|\n+-----+---+-----+-----+\n\n+-----+-----+-------+\n|key_1|key_2|country|\n+-----+-----+-------+\n|    1|    1|    USA|\n|    2|    2|  China|\n+-----+-----+-------+\n\n+-----+-----+-----+---+-------+\n|key_1|key_2| name|age|country|\n+-----+-----+-----+---+-------+\n|    1|    1| andy| 20|    USA|\n|    2|    2|james| 12|  China|\n+-----+-----+-----+---+-------+\n\n+-----+---+-----+-----+-----+-----+-------+\n| name|age|key_1|key_2|key_1|key_2|country|\n+-----+---+-----+-----+-----+-----+-------+\n| andy| 20|    1|    1|    1|    1|    USA|\n|james| 12|    2|    2|    2|    2|  China|\n+-----+---+-----+-----+-----+-----+-------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d72"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d73"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d74"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d75"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d76"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d77"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d78"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d79"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d80"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d81"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d82"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d83"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d84"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d85"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_-177297320",
      "id": "20180530-135600_354945835",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:51:44.228",
      "dateFinished": "2022-10-10 03:51:46.998",
      "status": "FINISHED"
    },
    {
      "title": "Use SQL directly",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")])\\\n           .toDF(\"id\", \"name\", \"age\", \"country\")\n# call createOrReplaceTempView first if you want to query this DataFrame via sql\ndf1.createOrReplaceTempView(\"people\")\n# SparkSession.sql return DataFrame\ndf2 \u003d spark.sql(\"select name, age from people\")\ndf2.show()\n\n# You need to register udf if you want to use it in sql\nspark.udf.register(\"udf1\", lambda e : e.upper())\ndf3 \u003d spark.sql(\"select udf1(name), age from people\")\ndf3.show()",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:49.459",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---+\n| name|age|\n+-----+---+\n| andy| 20|\n| jeff| 23|\n|james| 18|\n+-----+---+\n\n+----------+---+\n|udf1(name)|age|\n+----------+---+\n|      ANDY| 20|\n|      JEFF| 23|\n|     JAMES| 18|\n+----------+---+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d86"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d87"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d88"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d89"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_1756979054",
      "id": "20180530-132023_995737505",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:51:49.463",
      "dateFinished": "2022-10-10 03:51:49.845",
      "status": "FINISHED"
    },
    {
      "title": "Show Tables",
      "text": "%spark.sql\n\nshow tables",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:52.845",
      "progress": 0,
      "config": {
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true,
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "database": "string",
                      "tableName": "string",
                      "isTemporary": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "database\ttableName\tisTemporary\n\tbank\ttrue\n\tpeople\ttrue\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578388432752_877455036",
      "id": "paragraph_1578388432752_877455036",
      "dateCreated": "2020-01-07 17:13:52.752",
      "dateStarted": "2022-10-10 03:51:52.849",
      "dateFinished": "2022-10-10 03:51:52.934",
      "status": "FINISHED"
    },
    {
      "title": "Visualize DataFrame/Dataset",
      "text": "%md\n\nThere are two approaches to visualise DataFrame/Dataset in Zeppelin\n\n* Use SparkSQLInterpreter via `%spark.sql`\n* Use ZeppelinContext via `z.show`\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-17 01:40:26.315",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": false,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThere are two approaches to visualise DataFrame/Dataset in Zeppelin\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse SparkSQLInterpreter via \u003ccode\u003e%spark.sql\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUse ZeppelinContext via \u003ccode\u003ez.show\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_1924561483",
      "id": "20180530-132128_2114955642",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2021-07-15 14:41:34.804",
      "dateFinished": "2021-07-15 14:41:34.819",
      "status": "FINISHED"
    },
    {
      "title": "Visualise DataFrame/Dataset via z.show",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")])\\\n    .toDF(\"id\", \"name\", \"age\", \"country\")\ndf2 \u003d df1.groupBy(\"country\").count()\nz.show(df2)\n\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:51:59.227",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "country": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "country",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          },
          "1": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "country": "string",
                      "count": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "country",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "country\tcount\nChina\t1\nUSA\t2\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d90"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d91"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d92"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d93"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d94"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_-809695439",
      "id": "20180530-132634_1285621466",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:51:59.231",
      "dateFinished": "2022-10-10 03:52:00.091",
      "status": "FINISHED"
    },
    {
      "title": "Visualise DataFrame/Dataset via %spark.sql",
      "text": "%spark.pyspark\n\ndf1 \u003d spark.createDataFrame([(1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\")])\\\n    .toDF(\"id\", \"name\", \"age\", \"country\")\n            \n# register this DataFrame first before querying it via %spark.sql\ndf1.createOrReplaceTempView(\"people\")",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:52:02.402",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_381269276",
      "id": "20180530-132657_668624333",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:52:02.406",
      "dateFinished": "2022-10-10 03:52:02.484",
      "status": "FINISHED"
    },
    {
      "title": "",
      "text": "%spark.sql\n\nselect country, count(1) as count from people group by country",
      "user": "anonymous",
      "dateUpdated": "2022-10-10 03:52:04.540",
      "progress": 58,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "country",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "count",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "country": "string",
                      "count": "number"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "country",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "country\tcount\nChina\t1\nUSA\t2\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d95"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d96"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d97"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d98"
            },
            {
              "jobUrl": "http://zeppelin-spark-pseudo:39175/jobs/job?id\u003d99"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_601200360",
      "id": "20180530-132823_944494152",
      "dateCreated": "2020-01-07 17:01:40.851",
      "dateStarted": "2022-10-10 03:52:04.544",
      "dateFinished": "2022-10-10 03:52:05.320",
      "status": "FINISHED"
    },
    {
      "title": "",
      "text": "%spark.sql\n",
      "user": "anonymous",
      "dateUpdated": "2020-01-21 15:47:20.561",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387700851_-2136199261",
      "id": "20180530-132849_1305166760",
      "dateCreated": "2020-01-07 17:01:40.851",
      "status": "FINISHED"
    }
  ],
  "name": "3. Spark SQL (PySpark)",
  "id": "2EWM84JXA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}
